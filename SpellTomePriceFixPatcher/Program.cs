using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Newtonsoft.Json.Linq;
using System.Threading.Tasks;
using System.IO;
using SpellTomePricePatcher;

namespace SpellTomePriceFixPatcher
{
    public static class Program
    {
        public static Lazy<Settings> _settings;
        public static Task<int> Main(string[] args)
        {
            return SynthesisPipeline.Instance
            .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
            .SetAutogeneratedSettings(nickname: "Settings", path: "settings.json", out _settings)
            .SetTypicalOpen(GameRelease.SkyrimSE, "SpellTomePricePatcher.esp")
            .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            float valueMultiplier = _settings.Value.ValueMultiplier;

            Console.WriteLine("*** DETECTED SETTINGS ***");
            Console.WriteLine("value_multiplier: " + valueMultiplier);
            Console.WriteLine("*************************");

            foreach (var book in state.LoadOrder.PriorityOrder.Book().WinningOverrides())
            {
                if (book.Keywords != null && book.Keywords.Contains(Skyrim.Keyword.VendorItemSpellTome)) {
                    Book bookToModify = book.DeepCopy();
                    bookToModify.Value = (uint)(bookToModify.Value * valueMultiplier);
                    if (book.Value != bookToModify.Value)
                        state.PatchMod.Books.Set(bookToModify);
                }
            }
        }
    }
}
